/** @file    imop.tc
 ** @author  Andrea Vedaldi
 ** @brief   Image operations - Definition Template
 **/

/* AUTORIGHTS
Copyright 2007 (c) Andrea Vedaldi and Brian Fulkerson

This file is part of VLFeat, available in the terms of the GNU
General Public License version 2.
*/

#include "mathop.h"

#include <math.h>
#include <stdlib.h>

#undef VL_IMSMOOTH
#undef VL_IMSMOOTH_
#undef VL_CONVTRANSP
#undef VL_CONVTRANSP_

#define VL_IMSMOOTH(SFX)    vl_imsmooth_ ## SFX
#define VL_IMSMOOTH_(SFX)   VL_IMSMOOTH(SFX)
#define VL_CONVTRANSP(SFX)  vl_convtransp_ ## SFX
#define VL_CONVTRANSP_(SFX) VL_CONVTRANSP(SFX)

VL_EXPORT
void
VL_CONVTRANSP_(SFX) (PIX       *dst,
                     PIX const *src,
                     PIX const *filt,
                     int width, int height, int filt_width,
                     int mode)
{
  int i, j ;

  /* Convolve along the first dimension. Also, circularly swap     */
  /* dimension in the output, making the first dimension the last  */
  /*                                                               */
  /* src  is width x height                                        */
  /* dst  is height x width                                        */
  /* filt is 2 * filt_width + 1                                    */
  /*                                                               */

  switch (mode) {
  case VL_CONV_CONT :
    for(j = 0 ; j < height ; ++j) {
      for(i = 0 ; i < width ; ++i) {
        PIX        acc   = 0.0 ;
        PIX const *g     = filt ;
        PIX const *start = src + (i - filt_width) ;
        PIX const *stop ;
        PIX        x ;

        /* beginning */
        stop = src + VL_MAX(0, i - filt_width) ;
        x    = *stop ;
        while (start <= stop) { acc += (*g++) * x ; start++ ; }

        /* middle */
        stop =  src + VL_MIN(width - 1, i + filt_width) ;
        while (start <  stop) acc += (*g++) * (*start++) ;

        /* end */
        x  = *start ;
        stop = src + (i + filt_width) ;
        while (start <= stop) { acc += (*g++) * x ; start++ ; }

        /* save */
        *dst = acc ;
        dst += height ;

        assert (g - filt == 2 * filt_width +1) ;
      }
      /* next column */
      src += width ;
      dst -= width*height - 1 ;
    }
    break ;

  default:
    assert (0) ;
  }
}

VL_EXPORT
void
VL_IMSMOOTH_(SFX)(PIX        *dst,
                  PIX        *temp,
                  PIX  const *src,
                  int width, int height, double sigma)
{
  /* We use either a static buffer or, if the variance is very big, a
   * new buffer. This is efficient and robust to buffer stealing. */
  static PIX   *filt       = 0 ;
  static int    filt_width = -1 ;
  static double filt_static_sigma = -1.0 ;  
  enum          { filt_static_res = 1024 } ;
  static PIX    filt_static [2 * filt_static_res + 1] ;

  int j ;

  if (sigma < (PIX)(1e-5)) {
    dst = memcpy(dst,src,width*height*sizeof(PIX)) ;
    return ;
  }                       

  /* window width */
  filt_width = ceil (4.0 * sigma) ;

  /* setup filter only if not available from previous iteration*/
  if (filt_static_sigma != sigma) {
    PIX acc = 0.0 ;

    if (filt_width <= filt_static_res) {
      /* use static buffer */
      filt = filt_static ;
      filt_static_sigma = sigma ;
    } else {
      /* dynamically allocate a larger buffer */
      filt = vl_malloc  (sizeof(PIX) * (2*filt_width+1)) ;
    }
    
    for (j = 0 ; j < 2 * filt_width + 1 ; ++j) {
      PIX  d = (PIX)(j - filt_width) / (PIX)(sigma) ;
      filt [j] = exp (- 0.5 * d * d) ;
      acc += filt [j] ;
    }
    
    /* normalize */
    for (j = 0 ; j < 2 * filt_width + 1 ; ++j) {
      filt [j] /= acc ;
    }
  }
  
  /* convolve */
  VL_CONVTRANSP_(SFX) (temp, src, filt,
                       width, height, filt_width,
                       VL_CONV_CONT) ;
  VL_CONVTRANSP_(SFX) (dst, temp, filt,
                       height, width, filt_width,
                       VL_CONV_CONT) ;

  /* free buffer? */
  if (filt_static_sigma != sigma) {
    vl_free (filt) ;
  }
}

/* 
 * Local Variables: *
 * mode: C *
 * End: *
 */
