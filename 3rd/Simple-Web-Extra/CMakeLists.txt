cmake_minimum_required (VERSION 2.8.8)
project (Simple-Web-Extra)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g -std=c++11 -Wall -Wextra -I/usr/local/include/simple-web-server")

include_directories(.)

find_package(Threads REQUIRED)

set(BOOST_COMPONENTS system thread filesystem date_time)
# Late 2017 TODO: remove the following checks and always use std::regex
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9)
        set(BOOST_COMPONENTS ${BOOST_COMPONENTS} regex)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_BOOST_REGEX")
    endif()
endif()
find_package(Boost 1.53.0 COMPONENTS ${BOOST_COMPONENTS} REQUIRED)
include_directories(SYSTEM ${Boost_INCLUDE_DIR})

if(APPLE)
    set(OPENSSL_ROOT_DIR "/usr/local/opt/openssl")
endif()

add_executable(http_examples http_examples.cpp)
target_link_libraries(http_examples ${Boost_LIBRARIES} json11 z pthread)

#TODO: add requirement for version 1.0.1g (can it be done in one line?)
#find_package(OpenSSL)
#
#if(OPENSSL_FOUND)
#    include_directories(SYSTEM ${OPENSSL_INCLUDE_DIR})
#
#    add_executable(https_examples https_examples.cpp)
#    target_link_libraries(https_examples ${Boost_LIBRARIES})
#    target_link_libraries(https_examples ${OPENSSL_LIBRARIES})
#    target_link_libraries(https_examples ${CMAKE_THREAD_LIBS_INIT})
#endif()
#
#if(MSYS) #TODO: Is MSYS true when MSVC is true?
#    target_link_libraries(http_examples ws2_32 wsock32)
#    if(OPENSSL_FOUND)
#        target_link_libraries(https_examples ws2_32 wsock32)
#    endif()
#endif()

#enable_testing()
#add_subdirectory(tests)

install(FILES server_extra.hpp  server_extra_rfc.hpp  server_extra_zip.hpp DESTINATION include/simple-web-server)
